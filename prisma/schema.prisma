// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  admin
  customer

  @@map("user_type")
}

enum Role {
  tourist
  agency

  @@map("role")
}

model User {
  userId         Int           @id @default(autoincrement()) @map("user_id")
  username       String        @unique
  email          String        @unique @db.VarChar(255)
  password       String        @db.VarChar(255)
  phoneNumber    String        @unique @map("phone_number") @db.VarChar(20)
  profilePicture String?       @map("profile_picture")
  userType       UserType      @default(customer) @map("user_type")
  role           Role          @default(tourist)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  lastLogin      DateTime?     @map("last_login")
  travelAgency   TravelAgency?
  tourist        Tourist?

  @@map("users")
}

model TravelAgency {
  travelAgencyId    Int     @id @default(autoincrement()) @map("travel_agency_id")
  userId            Int     @unique @map("user_id")
  agencyName        String  @map("agency_name") @db.VarChar(150)
  agencyDescription String? @map("agency_description")
  ruc               String  @unique @db.VarChar(20)
  address           String  @db.VarChar(255)
  logoUrl           String? @map("logo_url")
  website           String? @db.VarChar(255)
  verified          Boolean @default(false)
  user              User    @relation(fields: [userId], references: [userId])
  tours             Tour[]

  @@map("travel_agencies")
}

enum DocumentType {
  DNI
  PASSPORT
  CE

  @@map("document_type")
}

model Tourist {
  touristId      Int          @id @default(autoincrement()) @map("tourist_id")
  userId         Int          @unique @map("user_id")
  firstName      String       @map("first_name") @db.VarChar(100)
  lastName       String       @map("last_name") @db.VarChar(100)
  documentType   DocumentType @map("document_type")
  documentNumber String       @unique @map("document_number") @db.VarChar(50)
  birthdate      DateTime     @db.Date
  country        String?      @db.VarChar(100)
  gender         String?      @db.VarChar(10)
  user           User         @relation(fields: [userId], references: [userId])

  @@map("tourists")
}

model Tour {
  tourId          Int          @id @default(autoincrement()) @map("tour_id")
  agencyId        Int          @map("agency_id")
  agency          TravelAgency @relation(fields: [agencyId], references: [travelAgencyId])
  tourName        String       @map("tour_name") @db.VarChar(150)
  tourDescription String       @map("tour_description")
  regions         String[]
  price           Decimal      @db.Decimal(5, 2)
  duration        String       @db.VarChar(12)
  days            String[]
  maxGroupSize    Int?         @map("max_group_size") @db.SmallInt
  photosUrl       String[]     @map("photos_url")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  places          Place[]

  @@map("tours")
}

model Place {
  placeId     Int      @id @default(autoincrement()) @map("place_id")
  name        String   @db.VarChar(100)
  description String?
  photoUrl    String?  @map("photo_url")
  coordinates String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tour        Tour     @relation(fields: [tourId], references: [tourId])
  tourId      Int      @map("tour_id")

  @@map("places")
}
